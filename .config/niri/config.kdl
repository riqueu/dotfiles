input {
    keyboard {
        xkb {
            layout "us(intl)"
            options "grp:win_space_toggle,ctrl:nocaps"
        }

        numlock
    }

    touchpad {
        // off
        tap
        // dwt
        // dwtp
        // drag false
        // drag-lock
        natural-scroll
        accel-speed 0.5
        accel-profile "flat"
        scroll-method "two-finger"
        scroll-factor 0.2
        // disabled-on-external-mouse
    }

    mouse {
        // off
        // natural-scroll
        accel-speed -0.3
        accel-profile "flat"
        scroll-factor 0.8
        // scroll-method "no-scroll"
    }

    //warp-mouse-to-focus

    // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
    focus-follows-mouse max-scroll-amount="35%"
}

// `niri msg outputs` to see available outputs
output "eDP-1" {
    // off

    // `niri msg outputs` format is "<width>x<height>" or "<width>x<height>@<refresh rate>".
    mode "1920x1080@144"

    scale 1.0

    // normal, 90, 180, 270, flipped, flipped-90, flipped-180 and flipped-270.
    transform "normal"

    // Position of the output in the global coordinate space (for multi-monitor setups).
    position x=1280 y=0
}

layout {
    background-color "transparent"
    gaps 8

    center-focused-column "never"
    
    // workspace 1 always empty (so I made Mod+1 go to workspace 2 and so forth, see keybinds)
    empty-workspace-above-first

    preset-column-widths {
        proportion 0.33333
        proportion 0.5
        proportion 0.66667
    }

    // preset-window-heights { }

    // if brackets empty, windows decide their initial width
    default-column-width { proportion 0.66667; }

    focus-ring {
        // off
        width 1
        active-gradient from="#8d7ecfb3" to="#7287fdb3" angle=45
        inactive-color "#595959aa"
        urgent-color "#9b0000"
    }
    
    // focus ring but always visible
    border {
        off
        width 1
        active-gradient from="#8d7ecfb3" to="#7287fdb3" angle=45
        inactive-color "#595959aa"
        urgent-color "#9b0000"
    }

    shadow {
        on
        // draw-behind-window true
        softness 20
        spread 2
        offset x=0 y=0

        // (80 is 50% opacity, BF is 75%, FF is 100%, consult hex opacity lut for more)
        color "#1a1a1e80"
    }

    struts {
        left 8
        right 8
        top 0
        bottom 0
    }
}

prefer-no-csd

//screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"
screenshot-path null

// startup
spawn-at-startup "waybar"
spawn-at-startup "sunsetr"
spawn-at-startup "xwayland-satellite"
spawn-at-startup "swww-daemon"
spawn-at-startup "swaync"
spawn-at-startup "blueman-applet" // run systemctl start bluetooth to use it 
spawn-at-startup "nm-applet --indicator"

// clipboard manager
spawn-at-startup "wl-paste --type text --watch cliphist store"
spawn-at-startup "wl-paste --type image --watch cliphist store"

// poolkit authentication agent
spawn-at-startup "/usr/lib/polkit-kde-authentication-agent-1"

// swayidle (for swaylock)
spawn-at-startup "swayidle -w timeout 600 'swaylock -f' timeout 610 'niri msg action power-off-monitors' before-sleep 'swaylock -f'"

animations {
    //off
    //slowdown 3.0

    // Individual animations.
    workspace-switch {
        spring damping-ratio=1.0 stiffness=1000 epsilon=0.0001
    }

    window-open {
        duration-ms 150
        curve "ease-out-expo"
    }

    window-close {
        duration-ms 150
        curve "ease-out-quad"
    }

    horizontal-view-movement {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }

    window-movement {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }

    window-resize {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }

    config-notification-open-close {
        spring damping-ratio=0.6 stiffness=1000 epsilon=0.001
    }

    screenshot-ui-open {
        duration-ms 200
        curve "ease-out-quad"
    }

    overview-open-close {
        spring damping-ratio=1.0 stiffness=800 epsilon=0.0001
    }
}

environment {
    EDITOR "nvim"

    LIBVA_DRIVER_NAME "nvidia"
    __GL_VENDOR_LIBRARY_NAME "nvidia"
    __VK_LAYER_NV_optimus "NVIDIA_only"

    MOZ_ENABLE_WAYLAND "1"
    ELECTRON_OZONE_PLATFORM_HINT "auto"

    QT_QPA_PLATFORM "wayland"
    QT_STYLE_OVERRIDE "kvantum"
    QT_QPA_PLATFORMTHEME "qt5ct"

    DISPLAY ":0"
}

cursor {
    // hide-when-typing
    // hide-after-inactive-ms 1000
    xcursor-theme "BreezeX-RosePine-Linux"
    xcursor-size 28
}

hotkey-overlay {
    skip-at-startup 
}

overview {
    zoom 0.50
}

gestures {
    dnd-edge-view-scroll {
        trigger-width 30
        delay-ms 100
        max-speed 1500
    }

    dnd-edge-workspace-switch {
        trigger-height 50
        delay-ms 100
        max-speed 1500
    }

    // this might be interesting (https://github.com/YaLTeR/niri/issues/1473)
    hot-corners {
        off
    }
}

clipboard {
    disable-primary
}

// corner on all windows
window-rule {
    geometry-corner-radius 6
    clip-to-geometry true
}

// Firefox picture-in-picture player as floating by default
window-rule {
    match app-id=r#"firefox$"# title="^Picture-in-Picture$"
    open-floating true
}

// misc rules
window-rule {
    match app-id=r#"^zen$"# title=r#"^Library$"#
    open-floating true
}

window-rule {
    match app-id=r#"^thunar$"#
    open-floating true
}

// steam rules
window-rule {
    match app-id=r#"^steam$"# title=r#"^Friends.*$"#
    open-floating true
}

window-rule {
    match app-id=r#"^steam$"# title=r#"^Steam Settings$"#
    open-floating true
}

/-window-rule {
    match app-id=r#"^steam_app.*$"#
    // one day maybe (https://github.com/YaLTeR/niri/discussions/742)
    fullscreen-inhibit-idle true
}

// swayidle inhibitor while in fullscreen mode
/-window-rule {
    // one day maybe (https://github.com/YaLTeR/niri/discussions/1894)
    match is-fullscreen=true
    // one day maybe (https://github.com/YaLTeR/niri/discussions/742)
    fullscreen-inhibit-idle true
}

// pulsemixer rules (cant put them floating on the upper right corner)
/-window-rule {
    match app-id=r#"^pulsemixer$"#
    open-floating true
    open-on-output "current"
    default-column-width { fixed 500; }
    default-window-height { fixed 300; }
}

// Put swww inside the overview backdrop.
layer-rule {
    match namespace="^swww-daemon$"
    place-within-backdrop true
}

binds {
    Mod+Shift+Slash { show-hotkey-overlay; }

    Mod+Return hotkey-overlay-title="Open a Terminal" { spawn "kitty"; }
    Mod+E hotkey-overlay-title="Open File Manager" { spawn "thunar"; }
    Mod+Shift+L hotkey-overlay-title="Lock the Screen: swaylock" { spawn "swaylock" "-f"; }
    
    // Basic commands
    Mod+Tab repeat=false { toggle-overview; }
    Mod+S repeat=false { toggle-overview; }
    Alt+Tab { focus-workspace-previous; }
    Mod+Q { close-window; }
    Mod+D { toggle-window-floating; }
    Mod+Shift+P { power-off-monitors; }
    Mod+M { quit; }
    Ctrl+Alt+Delete { quit; }
    Mod+Escape allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

    // Move the focused window between the floating and the tiling layout.
    Mod+Shift+D { switch-focus-between-floating-and-tiling; }
    
    // Toggle tabbed column display mode
    Mod+Shift+J { toggle-column-tabbed-display; }

    // column management
    Mod+BracketLeft  { consume-or-expel-window-left; }
    Mod+BracketRight { consume-or-expel-window-right; }
    Mod+Comma  { consume-window-into-column; }
    Mod+Period { expel-window-from-column; }
    
    // window dimension management
    Mod+Ctrl+R { switch-preset-column-width; }
    Mod+Ctrl+Shift+R { switch-preset-window-height; }
    Mod+Ctrl+Alt+R { reset-window-height; }
    Mod+F { maximize-column; }
    Mod+Shift+F { fullscreen-window; }
    Mod+Ctrl+F { expand-column-to-available-width; }

    Mod+Minus { set-column-width "-10%"; }
    Mod+Equal { set-column-width "+10%"; }
    Mod+Shift+Minus { set-window-height "-10%"; }
    Mod+Shift+Equal { set-window-height "+10%"; }
    
    // window position management
    Mod+Ctrl+C { center-column; }
    Mod+Ctrl+Shift+C { center-visible-columns; }

    // LinkedIn (yes)
    Mod+Ctrl+Shift+Alt+L hotkey-overlay-title="Open LinkedIn" { spawn "xdg-open" "https://www.linkedin.com/"; }
    
    // Custom keyboard layout binds
    Shift+KP_Divide { spawn "wtype" "-P" "backslash"; }
    Shift+KP_Multiply { spawn "wtype" "-P" "bar"; }
    dead_acute { spawn "wtype" "-P" "apostrophe"; }
    Shift+dead_acute { spawn "wtype" "-P" "quotedbl"; }
    
    // Screenshots (niri's built-in)
    Print { screenshot; }
    Ctrl+Print { screenshot-screen; }
    Alt+Print { screenshot-window; }
    // Screenshots (w/grimblast instead of niri's built-in screenshot)
    // Print { spawn "grimblast" "--freeze" "copy" "area"; }
    // Mod+Print { spawn "sh" "-c" "grimblast --freeze save area - | swappy -f -"; }
    
    // Color Picker & Text Extract
    Mod+Shift+C { spawn "sh" "-c" "hyprpicker | wl-copy"; }
    Mod+Shift+T { spawn "sh" "-c" "grim -g \"$(slurp)\" - | tesseract stdin stdout | wl-copy"; }
    // Menus #TODO: fuzzel equivalents for other scripts
    Menu hotkey-overlay-title="Application Launcher" { spawn "fuzzel"; }
    Mod+R hotkey-overlay-title="Application Launcher" { spawn "fuzzel"; }
    // Mod+V hotkey-overlay-title="Clipboard History" { spawn "sh" "-c" "cliphist list | tofi --font-size=10 --width=40% --height=50% | cliphist decode | wl-copy"; }
    // Mod+C hotkey-overlay-title="Calculator" { spawn "~/scripts/tofi-calc.sh"; }
    // Mod+W hotkey-overlay-title="Random Wallpaper" { spawn "~/scripts/wallpaper-switcher.sh" "rand"; }
    // Mod+Shift+E hotkey-overlay-title="Emoji Picker" { spawn "~/scripts/emoji-picker.sh"; }
    // Mod+Shift+R hotkey-overlay-title="Web Search" { spawn "~/scripts/web-search.sh"; }
    // Mod+Shift+W hotkey-overlay-title="Wallpaper Switcher" { spawn "~/scripts/wallpaper-switcher.sh"; }
    // Mod+Shift+K hotkey-overlay-title="File Finder" { spawn "~/scripts/file-finder.sh" "~/Documents"; }
    // Mod+Shift+O hotkey-overlay-title="Kill Tofi" { spawn "killall" "tofi-drun" "tofi"; }
    
    // Motions (TODO: Switch to vim-like motions)
    Mod+Left  { focus-column-left; }
    Mod+Down  { focus-window-or-workspace-down; }
    Mod+Up    { focus-window-or-workspace-up; }
    Mod+Right { focus-column-right; }
    Mod+H     { focus-column-left; }
    Mod+J     { focus-window-down; }
    Mod+K     { focus-window-up; }
    Mod+L     { focus-column-right; }

    Mod+Ctrl+Left  { move-column-left; }
    //Mod+Ctrl+Down  { move-window-down; }
    //Mod+Ctrl+Up    { move-window-up; }
    Mod+Ctrl+Right { move-column-right; }
    // Mod+Ctrl+H     { move-column-left; }
    // Mod+Ctrl+J     { move-window-down; }
    // Mod+Ctrl+K     { move-window-up; }
    // Mod+Ctrl+L     { move-column-right; }

    // Alternative commands that move across workspaces when reaching
    // the first or last window in a column.
    // Mod+J     { focus-window-or-workspace-down; }
    // Mod+K     { focus-window-or-workspace-up; }
    // Mod+Ctrl+J     { move-window-down-or-to-workspace-down; }
    // Mod+Ctrl+K     { move-window-up-or-to-workspace-up; }

    Mod+Home { focus-column-first; }
    Mod+End  { focus-column-last; }
    Mod+Ctrl+Home { move-column-to-first; }
    Mod+Ctrl+End  { move-column-to-last; }
    
    // Monitor stuff (not really using)

    // Mod+Shift+Left  { focus-monitor-left; }
    // Mod+Shift+Down  { focus-monitor-down; }
    // Mod+Shift+Up    { focus-monitor-up; }
    // Mod+Shift+Right { focus-monitor-right; }
    // Mod+Shift+H     { focus-monitor-left; }
    // Mod+Shift+J     { focus-monitor-down; }
    // Mod+Shift+K     { focus-monitor-up; }
    // Mod+Shift+L     { focus-monitor-right; }

    // Mod+Shift+Ctrl+Left  { move-column-to-monitor-left; }
    // Mod+Shift+Ctrl+Down  { move-column-to-monitor-down; }
    // Mod+Shift+Ctrl+Up    { move-column-to-monitor-up; }
    // Mod+Shift+Ctrl+Right { move-column-to-monitor-right; }
    // Mod+Shift+Ctrl+H     { move-column-to-monitor-left; }
    // Mod+Shift+Ctrl+J     { move-column-to-monitor-down; }
    // Mod+Shift+Ctrl+K     { move-column-to-monitor-up; }
    // Mod+Shift+Ctrl+L     { move-column-to-monitor-right; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Shift+Ctrl+Left  { move-window-to-monitor-left; }
    // ...

    // And you can also move a whole workspace to another monitor:
    // Mod+Shift+Ctrl+Left  { move-workspace-to-monitor-left; }
    // ...

    Mod+U               { focus-workspace-down; }
    Mod+I               { focus-workspace-up; }
    Mod+Ctrl+Shift+Down { move-window-down-or-to-workspace-down; }
    Mod+Ctrl+Shift+Up   { move-window-up-or-to-workspace-up; }
    Mod+Ctrl+U          { move-column-to-workspace-down; }
    Mod+Ctrl+I          { move-column-to-workspace-up; }

    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+Page_Down { move-window-to-workspace-down; }
    // ...

    Mod+Shift+Page_Down { move-workspace-down; }
    Mod+Shift+Page_Up   { move-workspace-up; }
    Mod+Shift+U         { move-workspace-down; }
    Mod+Shift+I         { move-workspace-up; }

    // Mouse wheel workspace switching (with cooldown)
    Mod+WheelScrollDown      cooldown-ms=100 { focus-workspace-down; }
    Mod+WheelScrollUp        cooldown-ms=100 { focus-workspace-up; }
    Mod+Ctrl+WheelScrollDown cooldown-ms=100 { move-column-to-workspace-down; }
    Mod+Ctrl+WheelScrollUp   cooldown-ms=100 { move-column-to-workspace-up; }

    Mod+WheelScrollRight      { focus-column-right; }
    Mod+WheelScrollLeft       { focus-column-left; }
    Mod+Ctrl+WheelScrollRight { move-column-right; }
    Mod+Ctrl+WheelScrollLeft  { move-column-left; }

    // Usually scrolling up and down with Shift in applications results in
    // horizontal scrolling; these binds replicate that.
    Mod+Shift+WheelScrollDown      { focus-column-right; }
    Mod+Shift+WheelScrollUp        { focus-column-left; }
    Mod+Ctrl+Shift+WheelScrollDown { move-column-right; }
    Mod+Ctrl+Shift+WheelScrollUp   { move-column-left; }

    // Similarly, you can bind touchpad scroll "ticks".
    // Touchpad scrolling is continuous, so for these binds it is split into
    // discrete intervals.
    // These binds are also affected by touchpad's natural-scroll, so these
    // example binds are "inverted", since we have natural-scroll enabled for
    // touchpads by default.
    // Mod+TouchpadScrollDown { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02+"; }
    // Mod+TouchpadScrollUp   { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.02-"; }

    // You can refer to workspaces by index. However, keep in mind that
    // niri is a dynamic workspace system, so these commands are kind of
    // "best effort". Trying to refer to a workspace index bigger than
    // the current workspace count will instead refer to the bottommost
    // (empty) workspace.
    //
    // For example, with 2 workspaces + 1 empty, indices 3, 4, 5 and so on
    // will all refer to the 3rd workspace.
    // This is shifted by 1 because the first workspace is always empty (layout {empty-workspace-above-first})
    Mod+dead_grave { focus-workspace 1; }
    Mod+0 { focus-workspace 1; }
    Mod+1 { focus-workspace 2; }
    Mod+2 { focus-workspace 3; }
    Mod+3 { focus-workspace 4; }
    Mod+4 { focus-workspace 5; }
    Mod+5 { focus-workspace 6; }
    Mod+6 { focus-workspace 7; }
    Mod+7 { focus-workspace 8; }
    Mod+8 { focus-workspace 9; }
    Mod+9 { focus-workspace 10; }
    Mod+Shift+dead_grave { focus-workspace 1; }
    Mod+Shift+0 { move-column-to-workspace 1; }
    Mod+Shift+1 { move-column-to-workspace 2; }
    Mod+Shift+2 { move-column-to-workspace 3; }
    Mod+Shift+3 { move-column-to-workspace 4; }
    Mod+Shift+4 { move-column-to-workspace 5; }
    Mod+Shift+5 { move-column-to-workspace 6; }
    Mod+Shift+6 { move-column-to-workspace 7; }
    Mod+Shift+7 { move-column-to-workspace 8; }
    Mod+Shift+8 { move-column-to-workspace 9; }
    Mod+Shift+9 { move-column-to-workspace 10; }
    // Alternatively, there are commands to move just a single window:
    // Mod+Ctrl+1 { move-window-to-workspace 1; }

    // System controls
    XF86AudioRaiseVolume allow-when-locked=true { spawn "wpctl" "set-volume" "-l" "1" "@DEFAULT_AUDIO_SINK@" "5%+"; }
    XF86AudioLowerVolume allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "5%-"; }
    XF86AudioMute        allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
    XF86MonBrightnessUp   allow-when-locked=true { spawn "brightnessctl" "s" "10%+"; }
    XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "s" "10%-"; }
    XF86AudioNext  allow-when-locked=true { spawn "playerctl" "next"; }
    XF86AudioPause allow-when-locked=true { spawn "playerctl" "play-pause"; }
    XF86AudioPlay  allow-when-locked=true { spawn "playerctl" "play-pause"; }
    XF86AudioPrev  allow-when-locked=true { spawn "playerctl" "previous"; }
    
    // Keyboard backlight (not working for me rn cause rgb:kbd_backlight disappeared)
    // XF86KbdBrightnessUp   allow-when-locked=true { spawn "brightnessctl" "-d" "rgb:kbd_backlight" "set" "25%+"; }
    // XF86KbdBrightnessDown allow-when-locked=true { spawn "brightnessctl" "-d" "rgb:kbd_backlight" "set" "25%-"; }
    // XF86KbdLightOnOff     allow-when-locked=true { spawn "sh" "-c" "[ \"$(brightnessctl -d rgb:kbd_backlight g)\" -gt 0 ] && brightnessctl -d rgb:kbd_backlight s 0% || brightnessctl -d rgb:kbd_backlight s 100%"; }
    // Mod+XF86KbdLightOnOff allow-when-locked=true { spawn "~/scripts/toggle_kb_cycle.sh"; }
    
}
